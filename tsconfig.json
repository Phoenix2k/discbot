{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    "allowJs": false,                         /* Allow javascript files to be compiled. */
    "checkJs": false,                         /* Report errors in .js files. */
    "declaration": false,                      /* Generates corresponding '.d.ts' file. */
    "isolatedModules": true,                  /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    "lib": ["DOM", "ESNext"],                 /* Specify library files to be included in the compilation. */
    "module": "ESNext",                       /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    "noEmit": false,                          /* Do not emit outputs. */
    "outDir": "./dist",                       /* Redirect output structure to the directory. */
    "removeComments": true,                   /* Do not emit comments to output. */
    "rootDir": "./src",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    "sourceMap": true,                        /* Generates corresponding '.map' file. */
    "target": "ESNext",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
    // "composite": true,                     /* Enable project compilation */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "incremental": true,                   /* Enable incremental compilation */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "outFile": "./",                       /* Concatenate and emit output to single file. */

    /* Strict Type-Checking Options */
    "alwaysStrict": true,                     /* Parse in strict mode and emit "use strict" for each source file. */
    "noImplicitAny": true,                    /* Raise error on expressions and declarations with an implied 'any' type. */
    "noImplicitThis": true,                   /* Raise error on 'this' expressions with an implied 'any' type. */
    "strict": true,                           /* Enable all strict type-checking options. */
    "strictBindCallApply": true,              /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    "strictFunctionTypes": true,              /* Enable strict checking of function types. */
    "strictNullChecks": true,                 /* Enable strict null checks. */
    "strictPropertyInitialization": true,     /* Enable strict checking of property initialization in classes. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
    // "noUncheckedIndexedAccess": true,      /* Include 'undefined' in index signature results */

    /* Module Resolution Options */
    "allowSyntheticDefaultImports": false,    /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "baseUrl": "./src",                       /* Base directory to resolve non-absolute module names. */
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    "moduleResolution": "node",               /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "types": ["node"],                        /* Type declaration files to be included in compilation. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */

    /* Source Map Options */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */

    /* Experimental Options */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */

    /* Advanced Options */
    "forceConsistentCasingInFileNames": true,  /* Disallow inconsistently-cased references to the same file. */
    "skipLibCheck": false                       /* Skip type checking of declaration files. */
  },
  "include": ["src/**/*.ts"],
}
